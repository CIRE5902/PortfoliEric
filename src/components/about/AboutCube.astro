---
import { Image } from "astro:assets";
import imageNala from "../../assets/images/me/nala.jpg";
import imageMentaGaryTabby from "../../assets/images/me/mentatabbygary.jpg";
import imageClio from "../../assets/images/me/clio.jpg";
import imageRojo from "../../assets/images/me/rojo.jpg";
import imageTerrassa from "../../assets/images/me/terrassa.jpg";
import imageEric from "../../assets/images/me/eric.jpg";
---

<div class="cube-container">
    <div class="cube initial-position">
        <Image
            src={imageEric}
            alt="Eric"
            class:list={["cube-face-image", "image-1"]}
        />
        <Image
            src={imageMentaGaryTabby}
            alt="Menta, Gary y Tabby"
            class:list={["cube-face-image", "image-2"]}
        />
        <Image
            src={imageNala}
            alt="Nala"
            class:list={["cube-face-image", "image-3"]}
        />
        <Image
            src={imageClio}
            alt="Clio"
            class:list={["cube-face-image", "image-4"]}
        />
        <Image
            src={imageTerrassa}
            alt="Terrassa"
            class:list={["cube-face-image", "image-5"]}
        />
        <Image
            src={imageRojo}
            alt="Rojo"
            class:list={["cube-face-image", "image-6"]}
        />
    </div>
</div>

<div class="image-buttons">
    <input type="image" class="show-image-1" src={imageEric.src} alt="Eric" />
    <input
        type="image"
        class="show-image-2"
        src={imageMentaGaryTabby.src}
        alt="Menta, Gary y Tabby"
    />
    <input type="image" class="show-image-3" src={imageNala.src} alt="Nala" />
    <input type="image" class="show-image-4" src={imageClio.src} alt="Clio" />
    <input
        type="image"
        class="show-image-5"
        src={imageTerrassa.src}
        alt="Terrassa"
    />
    <input type="image" class="show-image-6" src={imageRojo.src} alt="Rojo" />
</div>

<style>
    .cube-container {
        position: relative;
        width: 100%;
        max-width: 300px;
        aspect-ratio: 1 / 1;
        margin: 2rem auto;
        perspective: 1000px;
    }

    .cube {
        position: absolute;
        width: 100%;
        height: 100%;
        transform-style: preserve-3d;
        transition: transform 1s cubic-bezier(0.32, 0.05, 0.35, 1.6);
    }

    .cube-face-image {
        display: block;
        position: absolute;
        width: 100%;
        height: 100%;
        object-fit: cover;
        box-shadow:
            0 0 0.5rem var(--purple-dark),
            0 0 1.5rem var(--purple-dark),
            0 0 3rem var(--purple-dark);
    }

    /* Calculamos Z con la mitad del tamaño del contenedor (max 150px) */
    .image-1 {
        transform: translateZ(150px);
    }

    .image-2 {
        transform: rotateX(-180deg) translateZ(150px);
    }

    .image-3 {
        transform: rotateY(90deg) translateZ(150px);
    }

    .image-4 {
        transform: rotateY(-90deg) translateZ(150px);
    }

    .image-5 {
        transform: rotateX(90deg) translateZ(150px);
    }

    .image-6 {
        transform: rotateX(-90deg) translateZ(150px);
    }

    .cube.initial-position {
        transform: translateZ(-150px) translateY(-1rem) rotateX(-15deg)
            rotateY(18deg) rotateZ(2deg);
    }

    .cube.show-image-1 {
        transform: translateZ(-150px);
    }

    .cube.show-image-2 {
        transform: translateZ(-150px) rotateX(180deg);
    }

    .cube.show-image-3 {
        transform: translateZ(-150px) rotateY(-90deg);
    }

    .cube.show-image-4 {
        transform: translateZ(-150px) rotateY(90deg);
    }

    .cube.show-image-5 {
        transform: translateZ(-150px) rotateX(-90deg);
    }

    .cube.show-image-6 {
        transform: translateZ(-150px) rotateX(90deg);
    }

    /* Opcional: botones de navegación responsive */
    .image-buttons {
        display: flex;
        flex-direction: row;
        gap: 20px;
        justify-content: center;
        margin-top: 75px;
    }

    .image-buttons input {
        width: 45px;
        height: 45px;
        border: 2px solid var(--text-primary);
    }

    .image-buttons input:focus {
        outline: none;
        border-color: var(--purple-dark);
        box-shadow:
            0 0 10px var(--purple-dark),
            0 0 40px var(--purple-dark),
            0 0 80px var(--purple-dark);
    }

    @media screen and (max-width: 550px) {
        .cube-container {
            max-width: 200px;
            margin: 1rem auto;
        }

        /* Recalcular profundidad Z en base a 200px (mitad = 100px) */
        .image-1,
        .image-2,
        .image-3,
        .image-4,
        .image-5,
        .image-6 {
            transform: translateZ(100px);
        }

        .image-2 {
            transform: rotateX(-180deg) translateZ(100px);
        }

        .image-3 {
            transform: rotateY(90deg) translateZ(100px);
        }

        .image-4 {
            transform: rotateY(-90deg) translateZ(100px);
        }

        .image-5 {
            transform: rotateX(90deg) translateZ(100px);
        }

        .image-6 {
            transform: rotateX(-90deg) translateZ(100px);
        }

        /* Ajuste de posición inicial y giros */
        .cube.initial-position,
        .cube.show-image-1,
        .cube.show-image-2,
        .cube.show-image-3,
        .cube.show-image-4,
        .cube.show-image-5,
        .cube.show-image-6 {
            transform: translateZ(-100px);
        }

        .cube.show-image-2 {
            transform: translateZ(-100px) rotateX(180deg);
        }

        .cube.show-image-3 {
            transform: translateZ(-100px) rotateY(-90deg);
        }

        .cube.show-image-4 {
            transform: translateZ(-100px) rotateY(90deg);
        }

        .cube.show-image-5 {
            transform: translateZ(-100px) rotateX(-90deg);
        }

        .cube.show-image-6 {
            transform: translateZ(-100px) rotateX(90deg);
        }

        /* Botones de navegación más pequeños */
        .image-buttons {
            flex-wrap: wrap;
            gap: 10px;
            margin-top: 1.5rem;
        }

        .image-buttons input {
            width: 35px;
            height: 35px;
            border-width: 1.5px;
        }

        .about-txtimg-socialMedia ul {
            padding: 0;
        }
    }
</style>

<script is:inline>
    const cube = document.querySelector(".cube");
    const imageButtons = document.querySelector(".image-buttons");
    const totalFaces = 6;

    if (cube && imageButtons) {
        let cubeImageClass =
            [...cube.classList].find((cls) => cls.startsWith("show-image-")) ||
            "show-image-1";
        let currentFace = parseInt(
            cubeImageClass.charAt(cubeImageClass.length - 1),
        );

        imageButtons.addEventListener("click", (e) => {
            const targetClass = e.target.className;
            if (
                e.target.nodeName === "INPUT" &&
                targetClass !== cubeImageClass
            ) {
                const faceNumber = parseInt(
                    targetClass.charAt(targetClass.length - 1),
                );
                currentFace = faceNumber;
                cube.classList.remove(cubeImageClass);
                cube.classList.add(targetClass);
                cubeImageClass = targetClass;
            }
        });

        let touchStartX = 0,
            touchStartY = 0,
            touchEndX = 0,
            touchEndY = 0;

        const cubeContainer = document.querySelector(".cube-container");

        if (cubeContainer) {
            cubeContainer.addEventListener("touchstart", (e) => {
                touchStartX = e.changedTouches[0].screenX;
                touchStartY = e.changedTouches[0].screenY;
            });

            cubeContainer.addEventListener("touchend", (e) => {
                touchEndX = e.changedTouches[0].screenX;
                touchEndY = e.changedTouches[0].screenY;
                handleSwipe();
            });

            function handleSwipe() {
                const deltaX = touchEndX - touchStartX;
                const deltaY = touchEndY - touchStartY;

                if (Math.abs(deltaX) > Math.abs(deltaY)) {
                    currentFace =
                        deltaX < -50
                            ? (currentFace % totalFaces) + 1
                            : ((currentFace - 2 + totalFaces) % totalFaces) + 1;
                } else {
                    currentFace =
                        deltaY < -50 ? 5 : deltaY > 50 ? 6 : currentFace;
                }

                const newClass = `show-image-${currentFace}`;
                cube.classList.remove(cubeImageClass);
                cube.classList.add(newClass);
                cubeImageClass = newClass;
            }
        }
    }
</script>